name: Build and Push Docker Image

on:
  push:
    branches-ignore:
      - '**/exclude-*'
  pull_request:
    branches-ignore:
      - '**/exclude-*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Read and parse .docker_version file
      - name: Read .docker_version file
        id: version_check
        run: |
          if [ ! -f .docker_version ]; then
            echo "Error: .docker_version file not found!" >&2
            exit 1
          fi

          # Read key-value pairs from the file
          while IFS='=' read -r key value || [ -n "$key" ]; do
            case "$key" in
              'last_version') LAST_VERSION="$value" ;;
              'new_version') NEW_VERSION="$value" ;;
            esac
          done < .docker_version

          # Validate the presence of required keys
          if [ -z "$LAST_VERSION" ] || [ -z "$NEW_VERSION" ]; then
            echo "Error: Missing required keys in .docker_version file!" >&2
            exit 1
          fi

          echo "last_version=$LAST_VERSION"
          echo "new_version=$NEW_VERSION"

          # Compare versions and set the environment variable
          if [ "$LAST_VERSION" = "$NEW_VERSION" ]; then
            echo "Version unchanged ($NEW_VERSION). Skipping build."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "Version changed (new: $NEW_VERSION, last: $LAST_VERSION). Proceeding with build."
            echo "skip_build=false" >> $GITHUB_ENV
            echo "version=$NEW_VERSION" >> $GITHUB_ENV
          fi

      # Step 3: Exit if versions are unchanged
      - name: Skip build and push if versions are unchanged
        if: env.skip_build == 'true'
        run: echo "Skipping build and push because versions are unchanged."

      # Step 4: Export DockerHub username to an environment variable
      - name: Set DockerHub username
        if: env.skip_build == 'false'
        run: echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV

      # Step 5: Determine branch and repository name
      - name: Get branch name and repository
        if: env.skip_build == 'false'
        id: branch_info
        run: |
          # Extract branch name from the GITHUB_REF
          BRANCH=$(echo "${GITHUB_REF##*/}")
          
          # Define the Docker Hub repository name
          if [ "$BRANCH" = "main" ]; then
            REPO_NAME="m3uparser" # Replace with your DockerHub repo name for main
          else
            REPO_NAME=$BRANCH
          fi
          echo "branch=$BRANCH" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        if: env.skip_build == 'false'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build the Docker image with 'latest' and versioned tags
      - name: Build Docker image
        if: env.skip_build == 'false'
        run: |
          docker build -t ${{ env.DOCKER_USERNAME }}/${{ env.repo_name }}:latest \
                       -t ${{ env.DOCKER_USERNAME }}/${{ env.repo_name }}:${{ env.version }} .

      # Step 8: Push both tags to Docker Hub
      - name: Push Docker image
        if: env.skip_build == 'false'
        run: |
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.repo_name }}:latest
          docker push ${{ env.DOCKER_USERNAME }}/${{ env.repo_name }}:${{ env.version }}
